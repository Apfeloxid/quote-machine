{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["quotes","quote","author","App","props","randomQuote","bind","getNewQuote","randomColor","state","randomNumber","Math","floor","random","length","document","documentElement","style","setProperty","this","setState","className","id","href","target","rel","class","onClick","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qPAGMA,G,MAAS,CACb,CACEC,MACE,4FACFC,OAAQ,kBAEV,CACED,MAAO,6DACPC,OAAQ,eAEV,CACED,MACE,oKACFC,OAAQ,cAEV,CACED,MACE,6EACFC,OAAQ,qBAEV,CACED,MACE,2GACFC,OAAQ,iBAEV,CACED,MACE,yEACFC,OAAQ,qBAEV,CACED,MAAO,8DACPC,OAAQ,oBAEV,CACED,MACE,yFACFC,OAAQ,0BAoFGC,E,kDA/Eb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAEDC,YAAc,EAAKA,YAAYC,KAAjB,gBACnB,EAAKC,YAAc,EAAKA,YAAYD,KAAjB,gBACnB,EAAKE,YAAc,EAAKA,YAAYF,KAAjB,gBAEnB,EAAKG,MAAQ,CACXR,MAAO,EAAKI,eARG,E,0DAajB,IAAIK,EAAeC,KAAKC,MAAMD,KAAKE,SAAWb,EAAOc,QACrD,OAAOd,EAAOU,K,oCAId,MACE,OACgB,IAAhBC,KAAKE,SACL,IACgB,IAAhBF,KAAKE,SACL,IACgB,IAAhBF,KAAKE,SACL,M,oCAKSE,SAASC,gBACfC,MAAMC,YAAY,eAAgBC,KAAKX,eAE5CW,KAAKC,SAAS,CACZnB,MAAOkB,KAAKd,kB,+BAKd,OACE,6BACE,yBAAKgB,UAAU,8BAA8BC,GAAG,aAC9C,wBAAIA,GAAG,OAAOD,UAAU,eACrBF,KAAKV,MAAMR,MAAMA,OAEpB,wBAAIqB,GAAG,UAAU,KAAOH,KAAKV,MAAMR,MAAMC,QACzC,yBAAKoB,GAAG,mBACN,uBACED,UAAU,kBACVE,KACE,0CACAJ,KAAKV,MAAMR,MAAMA,MACjB,KACAkB,KAAKV,MAAMR,MAAMC,OAEnBoB,GAAG,cACHE,OAAO,SACPC,IAAI,uBAEJ,uBAAGC,MAAM,oBAEX,4BACEL,UAAU,kBACVC,GAAG,YACHK,QAASR,KAAKZ,aAHhB,eASJ,wBAAIc,UAAU,cAAcC,GAAG,iB,GAvErBM,IAAMC,WChCJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASrB,SAASsB,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.0737e661.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nconst quotes = [\n  {\n    quote:\n      \"The greatest glory in living lies not in never falling, but in rising every time we fall.\",\n    author: \"Nelson Mandela\"\n  },\n  {\n    quote: \"The way to get started is to quit talking and begin doing.\",\n    author: \"Walt Disney\"\n  },\n  {\n    quote:\n      \"Your time is limited, so don't waste it living someone else's life. Don't be trapped by dogma â€“ which is living with the results of other people's thinking.\",\n    author: \"Steve Jobs\"\n  },\n  {\n    quote:\n      \"If life were predictable it would cease to be life, and be without flavor.\",\n    author: \"Eleanor Roosevelt\"\n  },\n  {\n    quote:\n      \"If you set your goals ridiculously high and it's a failure, you will fail above everyone else's success.\",\n    author: \"James Cameron\"\n  },\n  {\n    quote:\n      \"Tell me and I forget. Teach me and I remember. Involve me and I learn.\",\n    author: \"Benjamin Franklin\"\n  },\n  {\n    quote: \"I find that the harder I work, the more luck I seem to have\",\n    author: \"Thomas Jefferson\"\n  },\n  {\n    quote:\n      \"Success is not final; failure is not fatal: It is the courage to continue that counts.\",\n    author: \"Winston S. Churchill\"\n  }\n];\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.randomQuote = this.randomQuote.bind(this);\n    this.getNewQuote = this.getNewQuote.bind(this);\n    this.randomColor = this.randomColor.bind(this);\n\n    this.state = {\n      quote: this.randomQuote()\n    };\n  }\n\n  randomQuote() {\n    let randomNumber = Math.floor(Math.random() * quotes.length);\n    return quotes[randomNumber];\n  }\n\n  randomColor() {\n    return (\n      \"rgb(\" +\n      Math.random() * 255 +\n      \",\" +\n      Math.random() * 255 +\n      \",\" +\n      Math.random() * 255 +\n      \")\"\n    );\n  }\n\n  getNewQuote() {\n    let root = document.documentElement;\n    root.style.setProperty(\"--main-color\", this.randomColor());\n\n    this.setState({\n      quote: this.randomQuote()\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <div className=\"shadow-lg font-weight-light\" id=\"quote-box\">\n          <h1 id=\"text\" className=\"text-center\">\n            {this.state.quote.quote}\n          </h1>\n          <h2 id=\"author\">{\"- \" + this.state.quote.author}</h2>\n          <div id=\"buttonContainer\">\n            <a\n              className=\"btn btn-default\"\n              href={\n                'https://twitter.com/intent/tweet?text=\"' +\n                this.state.quote.quote +\n                '\" ' +\n                this.state.quote.author\n              }\n              id=\"tweet-quote\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              <i class=\"fab fa-twitter\"></i>\n            </a>\n            <button\n              className=\"btn btn-default\"\n              id=\"new-quote\"\n              onClick={this.getNewQuote}\n            >\n              New quote\n            </button>\n          </div>\n        </div>\n        <h2 className=\"text-center\" id=\"creator\">\n        </h2>\n      </div>\n    );\n  }\n}\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}